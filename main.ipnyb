import numpy as np
import pandas as pd
import yfinance as yf
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM, Dropout
import matplotlib.pyplot as plt
from datetime import datetime, timedelta

class StockPredictor:
    def __init__(self, ticker, start_date, end_date):
        self.ticker = ticker
        self.start_date = start_date
        self.end_date = end_date
        self.data = None
        self.model = None
        self.scaler = MinMaxScaler(feature_range=(0,1))

    def fetch_data(self):
        """Fetch stock data from Yahoo Finance"""
        try:
            stock = yf.Ticker(self.ticker)
            self.data = stock.history(start=self.start_date, end=self.end_date)
            if self.data.empty:
                raise Exception("No data found for the specified ticker and date range")
            print(f"Data fetched successfully for {self.ticker}")
            return True
        except Exception as e:
            print(f"Error fetching data: {str(e)}")
            return False

    def prepare_data(self, sequence_length=60):
        """Prepare data for LSTM model"""
        # Use only 'Close' prices
        dataset = self.data['Close'].values
        dataset = dataset.reshape(-1, 1)

        # Scale the data
        scaled_data = self.scaler.fit_transform(dataset)

        # Create sequences for training
        x_train, y_train = [], []

        for i in range(sequence_length, len(dataset)):
            x_train.append(scaled_data[i-sequence_length:i, 0])
            y_train.append(scaled_data[i, 0])

        x_train, y_train = np.array(x_train), np.array(y_train)
        x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))

        return x_train, y_train

    def build_model(self, input_shape):
        """Build LSTM model"""
        model = Sequential()
        model.add(LSTM(units=50, return_sequences=True, input_shape=input_shape))
        model.add(Dropout(0.2))
        model.add(LSTM(units=50, return_sequences=True))
        model.add(Dropout(0.2))
        model.add(LSTM(units=50))
        model.add(Dropout(0.2))
        model.add(Dense(units=1))

        model.compile(optimizer='adam', loss='mean_squared_error')
        self.model = model
        return model

    def train_model(self, x_train, y_train, epochs=50, batch_size=32):
        """Train the model"""
        self.model.fit(x_train, y_train, epochs=epochs, batch_size=batch_size, verbose=1)

    def predict_future(self, days=30):
        """Predict future stock prices"""
        # Get the last 60 days of data
        last_60_days = self.data['Close'].values[-60:]
        last_60_days_scaled = self.scaler.transform(last_60_days.reshape(-1, 1))

        # Create an empty list to store predictions
        predictions = []

        # Make predictions for the specified number of days
        current_batch = last_60_days_scaled.reshape((1, 60, 1))

        for i in range(days):
            current_pred = self.model.predict(current_batch)[0]
            predictions.append(current_pred[0])
            current_batch = np.append(current_batch[:, 1:, :], [[current_pred]], axis=1)

        # Inverse transform predictions
        predictions = np.array(predictions).reshape(-1, 1)
        predictions = self.scaler.inverse_transform(predictions)

        return predictions

    def plot_predictions(self, predictions):
        """Plot the actual vs predicted prices"""
        last_date = self.data.index[-1]
        future_dates = pd.date_range(start=last_date + timedelta(days=1),
                                   periods=len(predictions))

        plt.figure(figsize=(15,7))
        plt.plot(self.data.index, self.data['Close'], label='Historical Prices')
        plt.plot(future_dates, predictions, label='Predicted Prices')
        plt.title(f'{self.ticker} Stock Price Prediction')
        plt.xlabel('Date')
        plt.ylabel('Price')
        plt.legend()
        plt.show()

def main():
    # Example usage
    ticker = 'NVDA'  # Apple Inc.
    start_date = '2023-10-28'
    end_date = datetime.now().strftime('%Y-%m-%d')

    # Create predictor instance
    predictor = StockPredictor(ticker, start_date, end_date)

    # Fetch data
    if predictor.fetch_data():
        # Prepare data
        x_train, y_train = predictor.prepare_data()

        # Build and train model
        predictor.build_model((x_train.shape[1], 1))
        predictor.train_model(x_train, y_train)

        # Make predictions
        predictions = predictor.predict_future(days=30)

        # Plot results
        predictor.plot_predictions(predictions)

        # Print the predicted prices
        print("\nPredicted prices for the next 30 days:")
        for i, price in enumerate(predictions):
            print(f"Day {i+1}: ${price[0]:.2f}")

if __name__ == "__main__":
    main()
